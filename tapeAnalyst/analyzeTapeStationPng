#!/usr/bin/env python

# Built-in
import argparse

# 3rd Party
import numpy as np
import pandas as pd

# tapeAnalyst
import tapeAnalyst.reporting as reporting
from tapeAnalyst.gel_processing import TapeStationGel

def getOptions():
    """ Function to pull in command line arguments. """
    parser = argparse.ArgumentParser(description='A tool to analyze image output from the Agilent Tape Station 2200.')
    parser.add_argument('--gel', dest='gname', action='store', required=True, help='A PNG file containing the gel output from the TapeStations 2200 [Required].')
    parser.add_argument('--sample', dest='sname', action='store', required=True, help='A CSV file containing sample information from the TapeStations 2200 [Required].')
    parser.add_argument('-o', '--output', dest='oname', action='store', required=True, help='The name of HTML output file [Required].')
    parser.add_argument('--range', dest='range', action='store', required=False, default=None, help='Range for fragment size for doing quality assesment.')

    args = parser.parse_args()
    return args

def main(args):
    """ """

    #
    # Import Sample Information
    #
    try:
        dfSample = pd.read_csv(args.sname)
    except:
        # Windows encode needs ISO specified
        dfSample = pd.read_csv(args.sname, encoding = "ISO-8859-1")

    dfSample.columns = ['wellID', 'conc', 'description', 'alert', 'notes']

    # Add a new column with the index row indices
    dfSample.reset_index(inplace=True)

    # Check sample sheet to see if there is a ladder
    try:
        ladder = dfSample[dfSample['description'].str.lower() == 'ladder'].index
    except:
        ladder = None

    # If no ladder then set to None
    if not ladder.any():
        ladder = None

    #
    # Process gel image
    #
    gel = TapeStationGel(args.gname, ladder)

    # Generate gray scale intensity values for each lane
    gel.generateGrayIntensities()

    #TODO: Add addittion filtering/convolution steps here if needed

    #TODO: Add stats here

    #
    # Generate and output HTML report
    #
    html = reporting.HtmlReport(gel, dfSample)
    html.write(args.oname)


if __name__ == '__main__':

    args = getOptions()

    main(args)
