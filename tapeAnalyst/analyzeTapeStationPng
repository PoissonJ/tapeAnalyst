#!/usr/bin/env python
# Built-in
import argparse
import logging
import sys
import pickle

# 3rd Party
import numpy as np
import pandas as pd

# tapeAnalyst
#import tapeAnalyst.reporting as reporting
from tapeAnalyst.gel_processing import TapeStationGel
import tapeAnalyst.analysis as taa

def getOptions():
    """ Function to pull in command line arguments. """
    parser = argparse.ArgumentParser(description='A tool to analyze image output from the Agilent Tape Station 2200.')
    parser.add_argument('--gel', dest='gname', action='store', required=True, help='A PNG file containing the gel output from the TapeStations 2200 [Required].')
    parser.add_argument('--sample', dest='sname', action='store', required=True, help='A CSV file containing sample information from the TapeStations 2200 [Required].')
    parser.add_argument('-o', '--output', dest='oname', action='store', required=True, help='The name of HTML output file [Required].')
    parser.add_argument('--range', dest='range', action='store', required=False, default=None, help='Range for fragment size for doing quality assesment.')

    args = parser.parse_args()
    return args

def getLogger():
    # Set different streams of STDOUT and STDERR
    sout = logging.StreamHandler(stream=sys.stdout)
    serr = logging.StreamHandler(stream=sys.stderr)

    # Set log levels for different handler
    sout.setLevel(logging.INFO)
    serr.setLevel(logging.ERROR)

    # Add Handlers to common logger
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level='INFO', handlers=[sout, serr])
    logger = logging.getLogger()

    return logger


def main(args):
    # Import Sample Information
    try:
        # TapeAnalyst is a Windows program and it encodes CSV files using the
        # windows style ISO 
        dfSample = pd.read_csv(args.sname, encoding = "ISO-8859-1")
    except:
        # If that fails then try to import without ISO info.
        dfSample = pd.read_csv(args.sname)
        logger.warn('Was unable to read sample sheet using Windows specific ISO.')
    finally:
        if dfSample.shape[1] == 5:
            dfSample.columns = ['wellID', 'conc', 'description', 'alert', 'notes']

            # Get row indices by reseting the index. This will add a new column with 0 - N indices.
            dfSample.reset_index(inplace=True)
        else:
            logger.error('Check formating of the formating of the sample sheet. ' +
                         'There should be 5 columns with columns for: \
                            * Well ID \
                            * Conc. [pg/Âµl] \
                            * Sample Description \
                            * Alert \
                            * Observations')
            raise IndexError


    # Process gel image
    gel = TapeStationGel(args.gname, dfSample)

    pickle.dump(gel, open('data/gel.pkl', 'wb'))
    exit()

    # Get list of ladders
    ladders = taa.getLadder(gel.lanes)

    if ladders is not None:
        # Construct MW interperlator to estimate molecular weights
        interpMW = taa.interpMW()
    
    #TODO: Add addittion filtering/convolution steps here if needed

    #TODO: Add stats here

    #
    # Generate and output HTML report
    #
    #html = reporting.HtmlReport(gel, dfSample)
    #html.write(args.oname)


if __name__ == '__main__':
    args = getOptions()
    logger = getLogger()
    main(args)
